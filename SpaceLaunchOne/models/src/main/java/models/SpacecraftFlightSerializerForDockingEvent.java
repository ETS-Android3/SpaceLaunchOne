/*
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.   While this API is free to use it is subject to rate limiting for non-authenticated requests.  Please use https://lldev.thespacedevs.com for development testing - this endpoint has stale data but is not subject to any rate limits.  If you are interested in a higher rate limit please consider supporting the project on Patreon for access to an API Key.
 *
 * OpenAPI spec version: 2.2.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package models;

import com.google.gson.annotations.SerializedName;

import org.threeten.bp.OffsetDateTime;

import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * SpacecraftFlightSerializerForDockingEvent
 */

public class SpacecraftFlightSerializerForDockingEvent {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("destination")
  private String destination = null;

  @SerializedName("mission_end")
  private OffsetDateTime missionEnd = null;

  @SerializedName("spacecraft")
  private Spacecraft spacecraft = null;

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public SpacecraftFlightSerializerForDockingEvent destination(String destination) {
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @ApiModelProperty(value = "")
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }

  public SpacecraftFlightSerializerForDockingEvent missionEnd(OffsetDateTime missionEnd) {
    this.missionEnd = missionEnd;
    return this;
  }

   /**
   * Get missionEnd
   * @return missionEnd
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getMissionEnd() {
    return missionEnd;
  }

  public void setMissionEnd(OffsetDateTime missionEnd) {
    this.missionEnd = missionEnd;
  }

  public SpacecraftFlightSerializerForDockingEvent spacecraft(Spacecraft spacecraft) {
    this.spacecraft = spacecraft;
    return this;
  }

   /**
   * Get spacecraft
   * @return spacecraft
  **/
  @ApiModelProperty(value = "")
  public Spacecraft getSpacecraft() {
    return spacecraft;
  }

  public void setSpacecraft(Spacecraft spacecraft) {
    this.spacecraft = spacecraft;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpacecraftFlightSerializerForDockingEvent spacecraftFlightSerializerForDockingEvent = (SpacecraftFlightSerializerForDockingEvent) o;
    return Objects.equals(this.id, spacecraftFlightSerializerForDockingEvent.id) &&
        Objects.equals(this.url, spacecraftFlightSerializerForDockingEvent.url) &&
        Objects.equals(this.destination, spacecraftFlightSerializerForDockingEvent.destination) &&
        Objects.equals(this.missionEnd, spacecraftFlightSerializerForDockingEvent.missionEnd) &&
        Objects.equals(this.spacecraft, spacecraftFlightSerializerForDockingEvent.spacecraft);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, destination, missionEnd, spacecraft);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpacecraftFlightSerializerForDockingEvent {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    missionEnd: ").append(toIndentedString(missionEnd)).append("\n");
    sb.append("    spacecraft: ").append(toIndentedString(spacecraft)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

