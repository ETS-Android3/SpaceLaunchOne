buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.11.0, 0.99.99]'
    }
}

apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.android.application'

android {

    Properties properties = new Properties()
    properties.load(project.rootProject.file('secret.properties').newDataInputStream())
    Properties versionProps = new Properties()
    def versionPropsFile = project.rootProject.file('version.properties')
    versionProps.load(new FileInputStream(versionPropsFile))

    def major = 1
    def minor = 2
    def patch = 0
    def code = versionProps['VERSION_CODE'].toInteger() + 1
    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    signingConfigs {
        config {
            storeFile file(properties.getProperty('storeFile'))
            keyAlias properties.getProperty('keyAlias')
            storePassword properties.getProperty('storePassword')
            keyPassword properties.getProperty('keyPassword')
        }
    }
    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        applicationId "io.github.nkrusch.spacelaunchone"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode code
        versionName major + "." + minor + "." + patch + "." + code
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField 'int', "UpdateInterval", Min_Update_Interval
        buildConfigField 'int', "MissionTextClipLength", MissionText_ClipLength
        buildConfigField 'String', "CloudinaryClound", properties.getProperty('Cloudinary_Cloud')
        resValue("string", "google_maps_key", properties.getProperty('Google_Maps_Key'))
        manifestPlaceholders = [
                onesignal_app_id               : properties.getProperty('onesignal'),
                onesignal_google_project_number: 'REMOTE'
        ]
    }
    buildTypes {
        release {
            //  minifyEnabled true
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // support libraries
    implementation "com.android.support:support-v4:$androidSupportVersion"
    implementation "com.android.support:support-v13:$androidSupportVersion"
    implementation "com.android.support:support-vector-drawable:$androidSupportVersion"
    implementation "com.android.support:appcompat-v7:$androidSupportVersion"
    implementation "com.android.support:recyclerview-v7:$androidSupportVersion"
    implementation "com.android.support:cardview-v7:$androidSupportVersion"
    implementation "com.android.support:preference-v14:$androidSupportVersion"
    implementation "com.android.support:design:$androidSupportVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    // viewModels
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$archLifecycleVersion"

    // 3rd party libs
    implementation "com.cloudinary:cloudinary-android:$cloudinaryVersion"
    implementation "com.squareup.picasso:picasso:$picassoVersion"
    implementation "com.google.android.gms:play-services-maps:$googleMapsVersion"
    implementation "com.google.android.gms:play-services-places:$googlePlacesVersion"
    implementation "com.onesignal:OneSignal:$oneSignalVersion"

    // project modules
    implementation project(':datasrc')
    implementation project(':models')

    // testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
    options.addStringOption("encoding", "UTF-8")
    options.addStringOption("charset", "UTF-8")
    destinationDir = file("../../javadoc/")
    failOnError false
}