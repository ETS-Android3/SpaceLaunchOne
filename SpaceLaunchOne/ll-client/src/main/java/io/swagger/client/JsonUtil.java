/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.
 *
 * OpenAPI spec version: v2.0.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Agency".equalsIgnoreCase(className)) {
      return new TypeToken<List<Agency>>(){}.getType();
    }
    
    if ("AgencyList".equalsIgnoreCase(className)) {
      return new TypeToken<List<AgencyList>>(){}.getType();
    }
    
    if ("AgencySerializerDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<AgencySerializerDetailed>>(){}.getType();
    }
    
    if ("AgencySerializerDetailedCommon".equalsIgnoreCase(className)) {
      return new TypeToken<List<AgencySerializerDetailedCommon>>(){}.getType();
    }
    
    if ("AgencySerializerMini".equalsIgnoreCase(className)) {
      return new TypeToken<List<AgencySerializerMini>>(){}.getType();
    }
    
    if ("Astronaut".equalsIgnoreCase(className)) {
      return new TypeToken<List<Astronaut>>(){}.getType();
    }
    
    if ("AstronautDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautDetailed>>(){}.getType();
    }
    
    if ("AstronautDetailedSerializerNoFlights".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautDetailedSerializerNoFlights>>(){}.getType();
    }
    
    if ("AstronautFlight".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautFlight>>(){}.getType();
    }
    
    if ("AstronautFlightForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautFlightForExpedition>>(){}.getType();
    }
    
    if ("AstronautNormal".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautNormal>>(){}.getType();
    }
    
    if ("AstronautStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautStatus>>(){}.getType();
    }
    
    if ("AstronautType".equalsIgnoreCase(className)) {
      return new TypeToken<List<AstronautType>>(){}.getType();
    }
    
    if ("DockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingEvent>>(){}.getType();
    }
    
    if ("DockingEventDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingEventDetailed>>(){}.getType();
    }
    
    if ("DockingEventDetailedSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingEventDetailedSerializerForSpacestation>>(){}.getType();
    }
    
    if ("DockingEventSerializerForSpacecraftFlight".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingEventSerializerForSpacecraftFlight>>(){}.getType();
    }
    
    if ("DockingLocation".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingLocation>>(){}.getType();
    }
    
    if ("DockingLocationSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<List<DockingLocationSerializerForSpacestation>>(){}.getType();
    }
    
    if ("EventType".equalsIgnoreCase(className)) {
      return new TypeToken<List<EventType>>(){}.getType();
    }
    
    if ("Events".equalsIgnoreCase(className)) {
      return new TypeToken<List<Events>>(){}.getType();
    }
    
    if ("Expedition".equalsIgnoreCase(className)) {
      return new TypeToken<List<Expedition>>(){}.getType();
    }
    
    if ("ExpeditionDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpeditionDetail>>(){}.getType();
    }
    
    if ("ExpeditionDetailedSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpeditionDetailedSerializerForSpacestation>>(){}.getType();
    }
    
    if ("ExpeditionSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpeditionSerializerForSpacestation>>(){}.getType();
    }
    
    if ("FirstStage".equalsIgnoreCase(className)) {
      return new TypeToken<List<FirstStage>>(){}.getType();
    }
    
    if ("InfoURL".equalsIgnoreCase(className)) {
      return new TypeToken<List<InfoURL>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2001>>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20010>>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20011>>(){}.getType();
    }
    
    if ("InlineResponse20012".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20012>>(){}.getType();
    }
    
    if ("InlineResponse20013".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20013>>(){}.getType();
    }
    
    if ("InlineResponse20014".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse20014>>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2002>>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2003>>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2004>>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2005>>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2006>>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2007>>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2008>>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse2009>>(){}.getType();
    }
    
    if ("Landing".equalsIgnoreCase(className)) {
      return new TypeToken<List<Landing>>(){}.getType();
    }
    
    if ("LandingLocation".equalsIgnoreCase(className)) {
      return new TypeToken<List<LandingLocation>>(){}.getType();
    }
    
    if ("LandingType".equalsIgnoreCase(className)) {
      return new TypeToken<List<LandingType>>(){}.getType();
    }
    
    if ("LaunchDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<LaunchDetailed>>(){}.getType();
    }
    
    if ("LaunchSerializerCommon".equalsIgnoreCase(className)) {
      return new TypeToken<List<LaunchSerializerCommon>>(){}.getType();
    }
    
    if ("LaunchSerializerMini".equalsIgnoreCase(className)) {
      return new TypeToken<List<LaunchSerializerMini>>(){}.getType();
    }
    
    if ("LaunchStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<LaunchStatus>>(){}.getType();
    }
    
    if ("Launcher".equalsIgnoreCase(className)) {
      return new TypeToken<List<Launcher>>(){}.getType();
    }
    
    if ("LauncherConfig".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherConfig>>(){}.getType();
    }
    
    if ("LauncherConfigDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherConfigDetail>>(){}.getType();
    }
    
    if ("LauncherConfigDetailSerializerForAgency".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherConfigDetailSerializerForAgency>>(){}.getType();
    }
    
    if ("LauncherConfigList".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherConfigList>>(){}.getType();
    }
    
    if ("LauncherDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherDetail>>(){}.getType();
    }
    
    if ("LauncherDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<LauncherDetailed>>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<List<Location>>(){}.getType();
    }
    
    if ("LocationDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<LocationDetail>>(){}.getType();
    }
    
    if ("Mission".equalsIgnoreCase(className)) {
      return new TypeToken<List<Mission>>(){}.getType();
    }
    
    if ("Orbit".equalsIgnoreCase(className)) {
      return new TypeToken<List<Orbit>>(){}.getType();
    }
    
    if ("Pad".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pad>>(){}.getType();
    }
    
    if ("PadSerializerNoLocation".equalsIgnoreCase(className)) {
      return new TypeToken<List<PadSerializerNoLocation>>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<List<Program>>(){}.getType();
    }
    
    if ("RocketDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<RocketDetailed>>(){}.getType();
    }
    
    if ("RocketSerializerCommon".equalsIgnoreCase(className)) {
      return new TypeToken<List<RocketSerializerCommon>>(){}.getType();
    }
    
    if ("SpaceStation".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStation>>(){}.getType();
    }
    
    if ("SpaceStationDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationDetailed>>(){}.getType();
    }
    
    if ("SpaceStationDetailedSerializerForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationDetailedSerializerForExpedition>>(){}.getType();
    }
    
    if ("SpaceStationSerializerForCommon".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationSerializerForCommon>>(){}.getType();
    }
    
    if ("SpaceStationSerializerForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationSerializerForDockingEvent>>(){}.getType();
    }
    
    if ("SpaceStationSerializerForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationSerializerForExpedition>>(){}.getType();
    }
    
    if ("SpaceStationStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationStatus>>(){}.getType();
    }
    
    if ("SpaceStationType".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpaceStationType>>(){}.getType();
    }
    
    if ("Spacecraft".equalsIgnoreCase(className)) {
      return new TypeToken<List<Spacecraft>>(){}.getType();
    }
    
    if ("SpacecraftConfig".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftConfig>>(){}.getType();
    }
    
    if ("SpacecraftConfigType".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftConfigType>>(){}.getType();
    }
    
    if ("SpacecraftConfiguration".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftConfiguration>>(){}.getType();
    }
    
    if ("SpacecraftConfigurationDetail".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftConfigurationDetail>>(){}.getType();
    }
    
    if ("SpacecraftDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftDetailed>>(){}.getType();
    }
    
    if ("SpacecraftDetailedNoFlights".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftDetailedNoFlights>>(){}.getType();
    }
    
    if ("SpacecraftFlight".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlight>>(){}.getType();
    }
    
    if ("SpacecraftFlightDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlightDetailed>>(){}.getType();
    }
    
    if ("SpacecraftFlightDetailedSerializerForLaunch".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlightDetailedSerializerForLaunch>>(){}.getType();
    }
    
    if ("SpacecraftFlightForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlightForDockingEvent>>(){}.getType();
    }
    
    if ("SpacecraftFlightSerializerForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlightSerializerForDockingEvent>>(){}.getType();
    }
    
    if ("SpacecraftFlightSerializerForDockingEventDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftFlightSerializerForDockingEventDetailed>>(){}.getType();
    }
    
    if ("SpacecraftStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<SpacecraftStatus>>(){}.getType();
    }
    
    if ("VidURL".equalsIgnoreCase(className)) {
      return new TypeToken<List<VidURL>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Agency".equalsIgnoreCase(className)) {
      return new TypeToken<Agency>(){}.getType();
    }
    
    if ("AgencyList".equalsIgnoreCase(className)) {
      return new TypeToken<AgencyList>(){}.getType();
    }
    
    if ("AgencySerializerDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<AgencySerializerDetailed>(){}.getType();
    }
    
    if ("AgencySerializerDetailedCommon".equalsIgnoreCase(className)) {
      return new TypeToken<AgencySerializerDetailedCommon>(){}.getType();
    }
    
    if ("AgencySerializerMini".equalsIgnoreCase(className)) {
      return new TypeToken<AgencySerializerMini>(){}.getType();
    }
    
    if ("Astronaut".equalsIgnoreCase(className)) {
      return new TypeToken<Astronaut>(){}.getType();
    }
    
    if ("AstronautDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautDetailed>(){}.getType();
    }
    
    if ("AstronautDetailedSerializerNoFlights".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautDetailedSerializerNoFlights>(){}.getType();
    }
    
    if ("AstronautFlight".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautFlight>(){}.getType();
    }
    
    if ("AstronautFlightForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautFlightForExpedition>(){}.getType();
    }
    
    if ("AstronautNormal".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautNormal>(){}.getType();
    }
    
    if ("AstronautStatus".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautStatus>(){}.getType();
    }
    
    if ("AstronautType".equalsIgnoreCase(className)) {
      return new TypeToken<AstronautType>(){}.getType();
    }
    
    if ("DockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<DockingEvent>(){}.getType();
    }
    
    if ("DockingEventDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<DockingEventDetailed>(){}.getType();
    }
    
    if ("DockingEventDetailedSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<DockingEventDetailedSerializerForSpacestation>(){}.getType();
    }
    
    if ("DockingEventSerializerForSpacecraftFlight".equalsIgnoreCase(className)) {
      return new TypeToken<DockingEventSerializerForSpacecraftFlight>(){}.getType();
    }
    
    if ("DockingLocation".equalsIgnoreCase(className)) {
      return new TypeToken<DockingLocation>(){}.getType();
    }
    
    if ("DockingLocationSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<DockingLocationSerializerForSpacestation>(){}.getType();
    }
    
    if ("EventType".equalsIgnoreCase(className)) {
      return new TypeToken<EventType>(){}.getType();
    }
    
    if ("Events".equalsIgnoreCase(className)) {
      return new TypeToken<Events>(){}.getType();
    }
    
    if ("Expedition".equalsIgnoreCase(className)) {
      return new TypeToken<Expedition>(){}.getType();
    }
    
    if ("ExpeditionDetail".equalsIgnoreCase(className)) {
      return new TypeToken<ExpeditionDetail>(){}.getType();
    }
    
    if ("ExpeditionDetailedSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<ExpeditionDetailedSerializerForSpacestation>(){}.getType();
    }
    
    if ("ExpeditionSerializerForSpacestation".equalsIgnoreCase(className)) {
      return new TypeToken<ExpeditionSerializerForSpacestation>(){}.getType();
    }
    
    if ("FirstStage".equalsIgnoreCase(className)) {
      return new TypeToken<FirstStage>(){}.getType();
    }
    
    if ("InfoURL".equalsIgnoreCase(className)) {
      return new TypeToken<InfoURL>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InlineResponse2001".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2001>(){}.getType();
    }
    
    if ("InlineResponse20010".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20010>(){}.getType();
    }
    
    if ("InlineResponse20011".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20011>(){}.getType();
    }
    
    if ("InlineResponse20012".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20012>(){}.getType();
    }
    
    if ("InlineResponse20013".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20013>(){}.getType();
    }
    
    if ("InlineResponse20014".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse20014>(){}.getType();
    }
    
    if ("InlineResponse2002".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2002>(){}.getType();
    }
    
    if ("InlineResponse2003".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2003>(){}.getType();
    }
    
    if ("InlineResponse2004".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2004>(){}.getType();
    }
    
    if ("InlineResponse2005".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2005>(){}.getType();
    }
    
    if ("InlineResponse2006".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2006>(){}.getType();
    }
    
    if ("InlineResponse2007".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2007>(){}.getType();
    }
    
    if ("InlineResponse2008".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2008>(){}.getType();
    }
    
    if ("InlineResponse2009".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse2009>(){}.getType();
    }
    
    if ("Landing".equalsIgnoreCase(className)) {
      return new TypeToken<Landing>(){}.getType();
    }
    
    if ("LandingLocation".equalsIgnoreCase(className)) {
      return new TypeToken<LandingLocation>(){}.getType();
    }
    
    if ("LandingType".equalsIgnoreCase(className)) {
      return new TypeToken<LandingType>(){}.getType();
    }
    
    if ("LaunchDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<LaunchDetailed>(){}.getType();
    }
    
    if ("LaunchSerializerCommon".equalsIgnoreCase(className)) {
      return new TypeToken<LaunchSerializerCommon>(){}.getType();
    }
    
    if ("LaunchSerializerMini".equalsIgnoreCase(className)) {
      return new TypeToken<LaunchSerializerMini>(){}.getType();
    }
    
    if ("LaunchStatus".equalsIgnoreCase(className)) {
      return new TypeToken<LaunchStatus>(){}.getType();
    }
    
    if ("Launcher".equalsIgnoreCase(className)) {
      return new TypeToken<Launcher>(){}.getType();
    }
    
    if ("LauncherConfig".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherConfig>(){}.getType();
    }
    
    if ("LauncherConfigDetail".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherConfigDetail>(){}.getType();
    }
    
    if ("LauncherConfigDetailSerializerForAgency".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherConfigDetailSerializerForAgency>(){}.getType();
    }
    
    if ("LauncherConfigList".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherConfigList>(){}.getType();
    }
    
    if ("LauncherDetail".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherDetail>(){}.getType();
    }
    
    if ("LauncherDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<LauncherDetailed>(){}.getType();
    }
    
    if ("Location".equalsIgnoreCase(className)) {
      return new TypeToken<Location>(){}.getType();
    }
    
    if ("LocationDetail".equalsIgnoreCase(className)) {
      return new TypeToken<LocationDetail>(){}.getType();
    }
    
    if ("Mission".equalsIgnoreCase(className)) {
      return new TypeToken<Mission>(){}.getType();
    }
    
    if ("Orbit".equalsIgnoreCase(className)) {
      return new TypeToken<Orbit>(){}.getType();
    }
    
    if ("Pad".equalsIgnoreCase(className)) {
      return new TypeToken<Pad>(){}.getType();
    }
    
    if ("PadSerializerNoLocation".equalsIgnoreCase(className)) {
      return new TypeToken<PadSerializerNoLocation>(){}.getType();
    }
    
    if ("Program".equalsIgnoreCase(className)) {
      return new TypeToken<Program>(){}.getType();
    }
    
    if ("RocketDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<RocketDetailed>(){}.getType();
    }
    
    if ("RocketSerializerCommon".equalsIgnoreCase(className)) {
      return new TypeToken<RocketSerializerCommon>(){}.getType();
    }
    
    if ("SpaceStation".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStation>(){}.getType();
    }
    
    if ("SpaceStationDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationDetailed>(){}.getType();
    }
    
    if ("SpaceStationDetailedSerializerForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationDetailedSerializerForExpedition>(){}.getType();
    }
    
    if ("SpaceStationSerializerForCommon".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationSerializerForCommon>(){}.getType();
    }
    
    if ("SpaceStationSerializerForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationSerializerForDockingEvent>(){}.getType();
    }
    
    if ("SpaceStationSerializerForExpedition".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationSerializerForExpedition>(){}.getType();
    }
    
    if ("SpaceStationStatus".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationStatus>(){}.getType();
    }
    
    if ("SpaceStationType".equalsIgnoreCase(className)) {
      return new TypeToken<SpaceStationType>(){}.getType();
    }
    
    if ("Spacecraft".equalsIgnoreCase(className)) {
      return new TypeToken<Spacecraft>(){}.getType();
    }
    
    if ("SpacecraftConfig".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftConfig>(){}.getType();
    }
    
    if ("SpacecraftConfigType".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftConfigType>(){}.getType();
    }
    
    if ("SpacecraftConfiguration".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftConfiguration>(){}.getType();
    }
    
    if ("SpacecraftConfigurationDetail".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftConfigurationDetail>(){}.getType();
    }
    
    if ("SpacecraftDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftDetailed>(){}.getType();
    }
    
    if ("SpacecraftDetailedNoFlights".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftDetailedNoFlights>(){}.getType();
    }
    
    if ("SpacecraftFlight".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlight>(){}.getType();
    }
    
    if ("SpacecraftFlightDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlightDetailed>(){}.getType();
    }
    
    if ("SpacecraftFlightDetailedSerializerForLaunch".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlightDetailedSerializerForLaunch>(){}.getType();
    }
    
    if ("SpacecraftFlightForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlightForDockingEvent>(){}.getType();
    }
    
    if ("SpacecraftFlightSerializerForDockingEvent".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlightSerializerForDockingEvent>(){}.getType();
    }
    
    if ("SpacecraftFlightSerializerForDockingEventDetailed".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftFlightSerializerForDockingEventDetailed>(){}.getType();
    }
    
    if ("SpacecraftStatus".equalsIgnoreCase(className)) {
      return new TypeToken<SpacecraftStatus>(){}.getType();
    }
    
    if ("VidURL".equalsIgnoreCase(className)) {
      return new TypeToken<VidURL>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
