/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.
 *
 * OpenAPI spec version: v2.0.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.AstronautDetailed;
import io.swagger.client.model.InlineResponse2001;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AstronautApi {
  String basePath = "https://ll.thespacedevs.com/2.0.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * API endpoint that allows Astronaut to be viewed.
   * @param dateOfBirth 
   * @param nationality 
   * @param agencyAbbrev 
   * @param name 
   * @param agencyName 
   * @param dateOfDeath 
   * @param status 
   * @param dateOfBirthGt 
   * @param dateOfBirthLt 
   * @param dateOfBirthGte 
   * @param dateOfBirthLte 
   * @param dateOfDeathGt 
   * @param dateOfDeathLt 
   * @param dateOfDeathGte 
   * @param dateOfDeathLte 
   * @param search A search term.
   * @param ordering Which field to use when ordering the results.
   * @param limit Number of results to return per page.
   * @param offset The initial index from which to return the results.
   * @return InlineResponse2001
  */
  public InlineResponse2001 astronautList (String dateOfBirth, String nationality, String agencyAbbrev, String name, String agencyName, String dateOfDeath, String status, String dateOfBirthGt, String dateOfBirthLt, String dateOfBirthGte, String dateOfBirthLte, String dateOfDeathGt, String dateOfDeathLt, String dateOfDeathGte, String dateOfDeathLte, String search, String ordering, Integer limit, Integer offset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/astronaut/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth", dateOfBirth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nationality", nationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "agency__abbrev", agencyAbbrev));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "agency__name", agencyName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death", dateOfDeath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__gt", dateOfBirthGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__lt", dateOfBirthLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__gte", dateOfBirthGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__lte", dateOfBirthLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__gt", dateOfDeathGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__lt", dateOfDeathLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__gte", dateOfDeathGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__lte", dateOfDeathLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that allows Astronaut to be viewed.
   * @param dateOfBirth    * @param nationality    * @param agencyAbbrev    * @param name    * @param agencyName    * @param dateOfDeath    * @param status    * @param dateOfBirthGt    * @param dateOfBirthLt    * @param dateOfBirthGte    * @param dateOfBirthLte    * @param dateOfDeathGt    * @param dateOfDeathLt    * @param dateOfDeathGte    * @param dateOfDeathLte    * @param search A search term.   * @param ordering Which field to use when ordering the results.   * @param limit Number of results to return per page.   * @param offset The initial index from which to return the results.
  */
  public void astronautList (String dateOfBirth, String nationality, String agencyAbbrev, String name, String agencyName, String dateOfDeath, String status, String dateOfBirthGt, String dateOfBirthLt, String dateOfBirthGte, String dateOfBirthLte, String dateOfDeathGt, String dateOfDeathLt, String dateOfDeathGte, String dateOfDeathLte, String search, String ordering, Integer limit, Integer offset, final Response.Listener<InlineResponse2001> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/astronaut/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth", dateOfBirth));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "nationality", nationality));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "agency__abbrev", agencyAbbrev));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "agency__name", agencyName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death", dateOfDeath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__gt", dateOfBirthGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__lt", dateOfBirthLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__gte", dateOfBirthGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_birth__lte", dateOfBirthLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__gt", dateOfDeathGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__lt", dateOfDeathLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__gte", dateOfDeathGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_of_death__lte", dateOfDeathLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2001) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2001.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * API endpoint that allows Astronaut to be viewed.
   * @param id A unique integer value identifying this Astronaut.
   * @return AstronautDetailed
  */
  public AstronautDetailed astronautRead (Integer id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling astronautRead",
        new ApiException(400, "Missing the required parameter 'id' when calling astronautRead"));
    }

    // create path and map variables
    String path = "/astronaut/{id}/".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AstronautDetailed) ApiInvoker.deserialize(localVarResponse, "", AstronautDetailed.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that allows Astronaut to be viewed.
   * @param id A unique integer value identifying this Astronaut.
  */
  public void astronautRead (Integer id, final Response.Listener<AstronautDetailed> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling astronautRead",
        new ApiException(400, "Missing the required parameter 'id' when calling astronautRead"));
    }

    // create path and map variables
    String path = "/astronaut/{id}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AstronautDetailed) ApiInvoker.deserialize(localVarResponse,  "", AstronautDetailed.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
