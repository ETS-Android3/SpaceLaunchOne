/**
 * Launch Library
 * The Launch Library API is a product by The Space Devs with an up-to-date database of Spaceflight events.
 *
 * OpenAPI spec version: v2.0.0
 * Contact: support@thespacedevs.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import io.swagger.client.model.InlineResponse2007;
import io.swagger.client.model.LaunchDetailed;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class LaunchApi {
  String basePath = "https://ll.thespacedevs.com/2.0.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * API endpoint that returns all Launch objects or a single launch.
  * EXAMPLE - /launch/&lt;id&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX
   * @param name 
   * @param slug 
   * @param rocketConfigurationName 
   * @param rocketConfigurationId 
   * @param status 
   * @param launchLibraryId 
   * @param rocketSpacecraftflightSpacecraftName 
   * @param rocketSpacecraftflightSpacecraftNameIcontains 
   * @param rocketSpacecraftflightSpacecraftId 
   * @param rocketConfigurationManufacturerName 
   * @param rocketConfigurationManufacturerNameIcontains 
   * @param rocketConfigurationFullName 
   * @param rocketConfigurationFullNameIcontains 
   * @param missionOrbitName 
   * @param missionOrbitNameIcontains 
   * @param netGt 
   * @param netLt 
   * @param netGte 
   * @param netLte 
   * @param search A search term.
   * @param ordering Which field to use when ordering the results.
   * @param limit Number of results to return per page.
   * @param offset The initial index from which to return the results.
   * @return InlineResponse2007
  */
  public InlineResponse2007 launchList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String netGt, String netLt, String netGte, String netLte, String search, String ordering, Integer limit, Integer offset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/launch/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__gt", netGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__lt", netLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__gte", netGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__lte", netLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * API endpoint that returns all Launch objects or a single launch.
   * EXAMPLE - /launch/&lt;id&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX
   * @param name    * @param slug    * @param rocketConfigurationName    * @param rocketConfigurationId    * @param status    * @param launchLibraryId    * @param rocketSpacecraftflightSpacecraftName    * @param rocketSpacecraftflightSpacecraftNameIcontains    * @param rocketSpacecraftflightSpacecraftId    * @param rocketConfigurationManufacturerName    * @param rocketConfigurationManufacturerNameIcontains    * @param rocketConfigurationFullName    * @param rocketConfigurationFullNameIcontains    * @param missionOrbitName    * @param missionOrbitNameIcontains    * @param netGt    * @param netLt    * @param netGte    * @param netLte    * @param search A search term.   * @param ordering Which field to use when ordering the results.   * @param limit Number of results to return per page.   * @param offset The initial index from which to return the results.
  */
  public void launchList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String netGt, String netLt, String netGte, String netLte, String search, String ordering, Integer limit, Integer offset, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/launch/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__gt", netGt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__lt", netLt));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__gte", netGte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "net__lte", netLte));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2007.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * API endpoint that returns previous Launch objects.
   * @param name 
   * @param slug 
   * @param rocketConfigurationName 
   * @param rocketConfigurationId 
   * @param status 
   * @param launchLibraryId 
   * @param rocketSpacecraftflightSpacecraftName 
   * @param rocketSpacecraftflightSpacecraftNameIcontains 
   * @param rocketSpacecraftflightSpacecraftId 
   * @param rocketConfigurationManufacturerName 
   * @param rocketConfigurationManufacturerNameIcontains 
   * @param rocketConfigurationFullName 
   * @param rocketConfigurationFullNameIcontains 
   * @param missionOrbitName 
   * @param missionOrbitNameIcontains 
   * @param program 
   * @param search A search term.
   * @param ordering Which field to use when ordering the results.
   * @param limit Number of results to return per page.
   * @param offset The initial index from which to return the results.
   * @return InlineResponse2007
  */
  public InlineResponse2007 launchPreviousList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String program, String search, String ordering, Integer limit, Integer offset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/launch/previous/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "program", program));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that returns previous Launch objects.
   * @param name    * @param slug    * @param rocketConfigurationName    * @param rocketConfigurationId    * @param status    * @param launchLibraryId    * @param rocketSpacecraftflightSpacecraftName    * @param rocketSpacecraftflightSpacecraftNameIcontains    * @param rocketSpacecraftflightSpacecraftId    * @param rocketConfigurationManufacturerName    * @param rocketConfigurationManufacturerNameIcontains    * @param rocketConfigurationFullName    * @param rocketConfigurationFullNameIcontains    * @param missionOrbitName    * @param missionOrbitNameIcontains    * @param program    * @param search A search term.   * @param ordering Which field to use when ordering the results.   * @param limit Number of results to return per page.   * @param offset The initial index from which to return the results.
  */
  public void launchPreviousList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String program, String search, String ordering, Integer limit, Integer offset, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/launch/previous/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "program", program));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2007.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * API endpoint that returns previous Launch objects.
   * @param id 
   * @return LaunchDetailed
  */
  public LaunchDetailed launchPreviousRead (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchPreviousRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchPreviousRead"));
    }

    // create path and map variables
    String path = "/launch/previous/{id}/".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LaunchDetailed) ApiInvoker.deserialize(localVarResponse, "", LaunchDetailed.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that returns previous Launch objects.
   * @param id 
  */
  public void launchPreviousRead (String id, final Response.Listener<LaunchDetailed> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchPreviousRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchPreviousRead"));
    }

    // create path and map variables
    String path = "/launch/previous/{id}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LaunchDetailed) ApiInvoker.deserialize(localVarResponse,  "", LaunchDetailed.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * API endpoint that returns all Launch objects or a single launch.
  * EXAMPLE - /launch/&lt;id&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX
   * @param id 
   * @return LaunchDetailed
  */
  public LaunchDetailed launchRead (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchRead"));
    }

    // create path and map variables
    String path = "/launch/{id}/".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LaunchDetailed) ApiInvoker.deserialize(localVarResponse, "", LaunchDetailed.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * API endpoint that returns all Launch objects or a single launch.
   * EXAMPLE - /launch/&lt;id&gt;/ or /launch/?mode&#x3D;list&amp;search&#x3D;SpaceX
   * @param id 
  */
  public void launchRead (String id, final Response.Listener<LaunchDetailed> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchRead"));
    }

    // create path and map variables
    String path = "/launch/{id}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LaunchDetailed) ApiInvoker.deserialize(localVarResponse,  "", LaunchDetailed.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * API endpoint that returns future Launch objects and launches from the last twenty four hours.
   * @param name 
   * @param slug 
   * @param rocketConfigurationName 
   * @param rocketConfigurationId 
   * @param status 
   * @param launchLibraryId 
   * @param rocketSpacecraftflightSpacecraftName 
   * @param rocketSpacecraftflightSpacecraftNameIcontains 
   * @param rocketSpacecraftflightSpacecraftId 
   * @param rocketConfigurationManufacturerName 
   * @param rocketConfigurationManufacturerNameIcontains 
   * @param rocketConfigurationFullName 
   * @param rocketConfigurationFullNameIcontains 
   * @param missionOrbitName 
   * @param missionOrbitNameIcontains 
   * @param program 
   * @param search A search term.
   * @param ordering Which field to use when ordering the results.
   * @param limit Number of results to return per page.
   * @param offset The initial index from which to return the results.
   * @return InlineResponse2007
  */
  public InlineResponse2007 launchUpcomingList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String program, String search, String ordering, Integer limit, Integer offset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/launch/upcoming/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "program", program));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2007) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2007.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that returns future Launch objects and launches from the last twenty four hours.
   * @param name    * @param slug    * @param rocketConfigurationName    * @param rocketConfigurationId    * @param status    * @param launchLibraryId    * @param rocketSpacecraftflightSpacecraftName    * @param rocketSpacecraftflightSpacecraftNameIcontains    * @param rocketSpacecraftflightSpacecraftId    * @param rocketConfigurationManufacturerName    * @param rocketConfigurationManufacturerNameIcontains    * @param rocketConfigurationFullName    * @param rocketConfigurationFullNameIcontains    * @param missionOrbitName    * @param missionOrbitNameIcontains    * @param program    * @param search A search term.   * @param ordering Which field to use when ordering the results.   * @param limit Number of results to return per page.   * @param offset The initial index from which to return the results.
  */
  public void launchUpcomingList (String name, String slug, String rocketConfigurationName, BigDecimal rocketConfigurationId, String status, BigDecimal launchLibraryId, String rocketSpacecraftflightSpacecraftName, String rocketSpacecraftflightSpacecraftNameIcontains, BigDecimal rocketSpacecraftflightSpacecraftId, String rocketConfigurationManufacturerName, String rocketConfigurationManufacturerNameIcontains, String rocketConfigurationFullName, String rocketConfigurationFullNameIcontains, String missionOrbitName, String missionOrbitNameIcontains, String program, String search, String ordering, Integer limit, Integer offset, final Response.Listener<InlineResponse2007> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/launch/upcoming/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "slug", slug));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__name", rocketConfigurationName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__id", rocketConfigurationId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "launch_library_id", launchLibraryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name", rocketSpacecraftflightSpacecraftName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__name__icontains", rocketSpacecraftflightSpacecraftNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__spacecraftflight__spacecraft__id", rocketSpacecraftflightSpacecraftId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name", rocketConfigurationManufacturerName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__manufacturer__name__icontains", rocketConfigurationManufacturerNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name", rocketConfigurationFullName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rocket__configuration__full_name__icontains", rocketConfigurationFullNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name", missionOrbitName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mission__orbit__name__icontains", missionOrbitNameIcontains));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "program", program));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ordering", ordering));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2007) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2007.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * API endpoint that returns future Launch objects and launches from the last twenty four hours.
   * @param id 
   * @return LaunchDetailed
  */
  public LaunchDetailed launchUpcomingRead (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchUpcomingRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchUpcomingRead"));
    }

    // create path and map variables
    String path = "/launch/upcoming/{id}/".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Token" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LaunchDetailed) ApiInvoker.deserialize(localVarResponse, "", LaunchDetailed.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * API endpoint that returns future Launch objects and launches from the last twenty four hours.
   * @param id 
  */
  public void launchUpcomingRead (String id, final Response.Listener<LaunchDetailed> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling launchUpcomingRead",
        new ApiException(400, "Missing the required parameter 'id' when calling launchUpcomingRead"));
    }

    // create path and map variables
    String path = "/launch/upcoming/{id}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Token" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LaunchDetailed) ApiInvoker.deserialize(localVarResponse,  "", LaunchDetailed.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
